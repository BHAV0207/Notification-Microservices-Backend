version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend


  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend

  
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend


  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      KAFKA_BROKER: "kafka:9092"
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
    depends_on:
      - kafka
      - redis
      
    networks:
      - backend

  product-service:
    build:
      context: ./ProductService
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      KAFKA_BROKER: "kafka:9092"
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
    depends_on:
      - kafka
      - redis
    networks:
      - backend

  order-service:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      KAFKA_BROKER: "kafka:9092"
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
    depends_on:
      - kafka
      - redis
    networks:
      - backend

  notification-service:
    build:
      context: ./NotificationService
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      KAFKA_BROKER: "kafka:9092"
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
      USER_SERVICE_URL: "http://user-service:8000" 
    env_file:
      - ./NotificationService/.env
    depends_on:
      - kafka
      - redis
    networks:
      - backend
  
  recommendation-service:
    build:
      context: ./RecommendationService
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      KAFKA_BROKER: "kafka:9092"
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
    depends_on:
      - kafka
      - redis
    networks:
      - backend

  graphql-service:
    build:
      context: ./Graphql-Gateway
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      USER_SERVICE_URL: "http://user-service:8000" 
      PRODUCT_SERVICE_URL: "http://product-service:8001"
      ORDER_SERVICE_URL: "http://order-service:8002"
      NOTIFICATION_SERVICE_URL: "http://notification-service:8003"
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
    depends_on:
      - user-service
      - product-service
      - order-service
      - notification-service
      - redis
    networks:
      - backend

networks:
  backend:
    driver: bridge